class ListenableObject {
    constructor(initialState = {}) {
        this.attributes = initialState;
        this.listenerMap = {};
    }

    set(attribute, value) {
        const oldValue = this.attributes[attribute];
        const changed = this.attributes[attribute] !== value;

        this.attributes[attribute] = value;

        if (changed && this.listenerMap['change:' + attribute] != null) {
            this.listenerMap['change:' + attribute].forEach(f => f(this, value, oldValue));
        }
    }

    get(attribute) {
        return this.attributes[attribute];
    }

    emitEvent(e, params) {
        if (this.listenerMap[e] != null) {
            this.listenerMap[e].forEach(f => f(this, params));
        }
    }

    on(e, func) {
        if (this.listenerMap[e] == null) {
            this.listenerMap[e] = [];
        }

        this.listenerMap[e].push(func);
    }
}

module.exports = ListenableObject;