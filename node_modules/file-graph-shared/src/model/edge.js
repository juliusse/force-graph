const _ = require('lodash');
const ListenableObject = require('../listenable-object');

class Edge extends ListenableObject {
    constructor(leftNode, rightNode, { tags = [], constantAttributes = {} } = {}) {
        super();
        this.id = Edge.generateId(leftNode, rightNode);
        this.leftNode = leftNode;
        this.rightNode = rightNode;

        this.leftNode.edges[this.id] = this;
        this.rightNode.edges[this.id] = this;

        this.tags = _.keyBy(tags, t => t.id);
        this.constantAttributes = constantAttributes;
        this.set('highlighted', false);
        this.set('selected', false);

        this.state = new ListenableObject({
            hasHighlightedNode: false,
            hasSelectedNode: false
        });

        this.listenTo(this.leftNode, 'change:selected', this.onNodeSelectionChanged);
        this.listenTo(this.rightNode, 'change:selected', this.onNodeSelectionChanged);
        this.listenTo(this.leftNode, 'change:highlighted', this.onNodeSelectionChanged);
        this.listenTo(this.rightNode, 'change:highlighted', this.onNodeSelectionChanged);

        this.listenTo(this.leftNode, 'added:tag', this.onNodeTagAdded);
        this.listenTo(this.rightNode, 'added:tag', this.onNodeTagAdded);
        this.listenTo(this.leftNode, 'removed:tag', this.onNodeTagRemoved);
        this.listenTo(this.rightNode, 'removed:tag', this.onNodeTagRemoved);
    }

    onNodeTagAdded(node, tag) {
        if(this.leftNode.hasTag(tag) && this.rightNode.hasTag(tag)) {
            this.addTag(tag);
        }
    }

    onNodeTagRemoved(node, tag) {
        if(this.hasTag(tag)) {
            this.removeTag(tag);
        }
    }

    onNodeSelectionChanged() {
        const hasHighlightedNode =
            this.leftNode.get('highlighted') || this.rightNode.get('highlighted');
        const hasSelectedNode =
            this.leftNode.get('selected') || this.rightNode.get('selected');
        this.set('hasHighlightedNode', hasHighlightedNode);
        this.set('hasSelectedNode', hasSelectedNode);
    }

    addTag(tag) {
        this.tags[tag.id] = tag;
        this.emitEvent('added:tag', tag);

    }

    removeTag(tag) {
        delete this.tags[tag.id];
        this.emitEvent('removed:tag', {tag});
    }

    hasTag(tag) {
        return this.tags[tag.id] != null;
    }

    get selected() {
        return this.get('selected');
    }

    set selected(isSelected) {
        this.set('selected', isSelected);
    }

    get highlighted() {
        return this.get('highlighted');
    }

    set highlighted(isHighlighted) {
        this.set('highlighted', isHighlighted);
    }

    removeListeners() {
        this.stopListening(this.leftNode, 'change:selected');
        this.stopListening(this.rightNode, 'change:selected');
        this.stopListening(this.leftNode, 'change:highlighted');
        this.stopListening(this.rightNode, 'change:highlighted');
    }

    static generateId(node1, node2) {
        const nodeIds = [node1.id, node2.id];
        return nodeIds.sort().join('-');
    }
}

module.exports = Edge;