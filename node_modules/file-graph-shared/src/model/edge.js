const _ = require('lodash');
const ListenableObject = require('../listenable-object');

class Edge extends ListenableObject {
    constructor(leftNode, rightNode, { tags = [], staticAttributes = [] } = {}) {
        super();
        this.id = Edge.generateId(leftNode, rightNode);
        this.leftNode = leftNode;
        this.rightNode = rightNode;

        this.leftNode.edges[this.id] = this;
        this.rightNode.edges[this.id] = this;

        this._tags = {};
        tags.forEach(t => this.addTag(t));

        this._staticAttributes = {};
        staticAttributes.forEach(sa => this.addStaticAttribute(sa));
        this.set('highlighted', false);
        this.set('selected', false);
        this.set('hasHighlightedRelative', false);


        this.listenTo(this.leftNode, 'change:selected', this.onNodeSelectionChanged);
        this.listenTo(this.rightNode, 'change:selected', this.onNodeSelectionChanged);
        this.listenTo(this.leftNode, 'change:highlighted', this.updateHasHighlightedRelative);
        this.listenTo(this.rightNode, 'change:highlighted', this.updateHasHighlightedRelative);

        this.listenTo(this.leftNode, 'added:tag', this.onNodeTagAdded);
        this.listenTo(this.rightNode, 'added:tag', this.onNodeTagAdded);
        this.listenTo(this.leftNode, 'removed:tag', this.onNodeTagRemoved);
        this.listenTo(this.rightNode, 'removed:tag', this.onNodeTagRemoved);
    }

    onNodeTagAdded(node, tag) {
        if (this.leftNode.hasTag(tag) && this.rightNode.hasTag(tag)) {
            this.addTag(tag);
        }
    }

    onNodeTagRemoved(node, tag) {
        if (this.hasTag(tag)) {
            this.removeTag(tag);
        }
    }

    onNodeSelectionChanged() {
        const hasSelectedNode =
            this.leftNode.get('selected') || this.rightNode.get('selected');
        this.set('hasSelectedNode', hasSelectedNode);
    }

    addStaticAttribute(staticAttribute) {
        this._staticAttributes[staticAttribute.id] = staticAttribute;
        this.listenTo(staticAttribute, 'change:highlighted', this.updateHasHighlightedRelative);
        this.emitEvent('added:staticAttribute', staticAttribute);
    }

    addTag(tag) {
        this._tags[tag.id] = tag;
        this.listenTo(tag, 'change:highlighted', this.updateHasHighlightedRelative);
        this.emitEvent('added:tag', tag);
    }

    removeTag(tag) {
        delete this._tags[tag.id];
        this.stopListening(tag, 'change:highlighted', this.updateHasHighlightedRelative);
        this.emitEvent('removed:tag', { tag });
    }

    hasTag(tag) {
        return this._tags[tag.id] != null;
    }

    hasMeaning() {
        return this.tags.length > 0 || Object.keys(this._staticAttributes).length > 0;
    }

    get selected() {
        return this.get('selected');
    }

    set selected(isSelected) {
        this.set('selected', isSelected);
    }

    get highlighted() {
        return this.get('highlighted');
    }

    set highlighted(isHighlighted) {
        this.set('highlighted', isHighlighted);
    }

    get tags() {
        return _.values(this._tags);
    }

    get staticAttributes() {
        return _.values(this._staticAttributes);
    }

    removeListeners() {
        this.stopListening(this.leftNode, 'change:selected');
        this.stopListening(this.rightNode, 'change:selected');
        this.stopListening(this.leftNode, 'change:highlighted');
        this.stopListening(this.rightNode, 'change:highlighted');
    }

    updateHasHighlightedRelative() {
        const hasHighlightedNode =
            this.leftNode.get('highlighted') || this.rightNode.get('highlighted');
        const hasHighlightedRelative =
            hasHighlightedNode ||
            this.tags.some(t => t.highlighted) ||
            this.staticAttributes.some(sa => sa.highlighted);

        this.set('hasHighlightedRelative', hasHighlightedRelative);
    }

    static generateId(node1, node2) {
        const nodeIds = [node1.id, node2.id];
        return nodeIds.sort().join('-');
    }
}

module.exports = Edge;