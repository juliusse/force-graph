const _ = require('lodash');

class ListenableObject {
    constructor(initialState = {}) {
        this.attributes = initialState;
        this.listenerMap = {};

        this.wrapperFuncs = {};
    }

    set(attribute, value) {
        const oldValue = this.attributes[attribute];
        const changed = this.attributes[attribute] !== value;

        this.attributes[attribute] = value;

        if (changed && this.listenerMap['change:' + attribute] != null) {
            _.values(this.listenerMap['change:' + attribute])
                .forEach(f => f(this, value, oldValue));
        }
    }

    get(attribute) {
        return this.attributes[attribute];
    }

    emitEvent(e, params) {
        if (this.listenerMap[e] != null) {
            _.values(this.listenerMap[e]).forEach(f => f(this, params));
        }
    }

    on(e, func) {
        if (this.listenerMap[e] == null) {
            this.listenerMap[e] = {};
        }

        if (func.id == null) {
            func.id = Math.random() + Date.now();
        }
        this.listenerMap[e][func.id] = func;
    }

    off(e, func) {
        delete this.listenerMap[e][func.id];
    }

    listenTo(obj, e, func) {
        const wrapperFunc = function () {
            func.apply(this, arguments);
        }.bind(this);
        wrapperFunc.id = Date.now() + Math.random();

        obj.on(e, wrapperFunc);

        if (this.wrapperFuncs[obj] == null) {
            this.wrapperFuncs[obj] = {};
        }

        this.wrapperFuncs[obj][e] = wrapperFunc;
    }

    stopListening(obj, e) {
        obj.off(e, this.wrapperFuncs[obj][e]);
    }
}

module.exports = ListenableObject;