const $ = require('jquery');
const _ = require('lodash');

const ListenableObject = require('../listenable-object');

class Node extends ListenableObject {
    constructor(id, name, { tags = [], staticAttributes = [] } = {}) {
        super();
        this.id = id;
        this.name = name;
        this._tags = {};
        this._staticAttributes = {};
        tags.forEach(t => this.addTag(t));
        staticAttributes.forEach(sa => this.addStaticAttribute(sa));

        this.edges = {};
        this.set('selected', false);
        this.set('highlighted', false);
        this.set('hasHighlightedRelative', false);
    }

    save() {
        return new Promise((res) => {
            $.ajax({
                type: 'POST',
                url: '/node',
                dataType: 'json',
                success: res,
                data: JSON.stringify({ node: this.toJSON() }),
                contentType: 'application/json'
            });
        })
            .then(data => this.emitEvent('updated', data));
    }

    static fromJSON(json, dataModel) {
        const tags = json.tags.map(tagName => dataModel.getTagForName(tagName));
        const staticAttributes = json.staticAttributes
            .map(({ group, value}) => dataModel.getStaticAttribute(group, value));
        return new Node(json.id, json.name, { tags, staticAttributes });
    }

    toJSON() {
        const json = _.pick(this, ['id', 'name', 'tags', 'staticAttributes']);
        json.tags = json.tags.map(t => t.id);
        return json;
    }

    get tags() {
        return _.values(this._tags);
    }

    get staticAttributes() {
        return _.values(this._staticAttributes);
    }

    get selected() {
        return this.get('selected');
    }

    set selected(isSelected) {
        this.set('selected', isSelected);
    }

    deselect() {
        this.set('selected', false);
    }

    get highlighted() {
        return this.get('highlighted');
    }

    set highlighted(isHighlighted) {
        this.set('highlighted', isHighlighted);
    }


    updateTags(newTagNames, tagProvider) {
        const removedTags = [];
        const addedTags = [];

        newTagNames.forEach(tagName => {
            if (!this.tags.some(t => t.name === tagName)) {
                const tag = tagProvider.getTagForName(tagName);
                addedTags.push(tag);
                this.addTag(tag);
            }
        });

        this.tags.forEach(tag => {
            if (newTagNames.indexOf(tag.name) === -1) {
                removedTags.push(tag);
                this.removeTag(tag);
            }
        });

        return {
            addedTags,
            removedTags
        };
    }

    getEdgeTo(nodeId) {
        return this.edges.find(edge =>
            edge.leftNode.id === nodeId || edge.rightNode.id === nodeId);
    }

    addTag(tag) {
        this._tags[tag.id] = tag;
        this.listenTo(tag, 'change:highlighted', this.updateHasHighlightedRelative);
        this.emitEvent('added:tag', tag);
    }

    removeTag(tag) {
        delete this._tags[tag.id];
        this.stopListening(tag, 'change:highlighted', this.updateHasHighlightedRelative);
        this.emitEvent('removed:tag', tag);
    }

    addStaticAttribute(staticAttribute) {
        this._staticAttributes[staticAttribute.id] = staticAttribute;
        this.listenTo(staticAttribute, 'change:highlighted', this.updateHasHighlightedRelative);
        this.emitEvent('added:staticAttribute', staticAttribute);
    }

    hasTag(tag) {
        return this._tags[tag.id] != null;
    }

    updateHasHighlightedRelative() {
        const hasHighlightedRelative =
            this.tags.some(t => t.highlighted) ||
            this.staticAttributes.some(sa => sa.highlighted);

        this.set('hasHighlightedRelative', hasHighlightedRelative);
    }
}

module.exports = Node;